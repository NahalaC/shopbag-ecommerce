<%- include('../partials/adminHeader') %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
   .error-message{
       color: red;
   }

       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }

       .thumbnail {
           margin-right: 10px;

       }
</style>
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Add New Product</h2>
               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">
                   <div class="card-body">
                    <form method="post" action="/admin/addProduct" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="productName" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" id="productName" class="form-control border">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-4">
                            <label for="description" class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="description" name="descriptionData" class="form-control border" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label for="regularPrice" class="form-label">Regular price</label>
                                    <input placeholder="₹" name="regularPrice" id="regularPrice" type="text" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label for="salePrice" class="form-label">Sale price</label>
                                    <input placeholder="₹" name="salePrice" id="salePrice" type="text" class="form-control border">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label for="quantity" class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" id="quantity" type="text" class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label for="color" class="form-label">Color</label>
                                    <input name="color" id="color" type="text" class="form-control border">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label for="category" class="form-label">Category</label>
                                        <select id="category" class="form-select border" style="width: 150px;" name="category">
                                            <% for (let i = 0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>"><%= cat[i].name %></option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4"></div>
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Status</label>
                                            <select class="form-select border" style="width: 150px;" name="status">
                                                    <option value="Out of Stock">Out of Stock</option>
                                                    <option value="Available">Available</option>
                                                    <option value="Discontinued">Discontinued</option>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose images</h4>
                            </div>
                            <div class="border row">
                                <div id="addedImagesContainer" class="thumbnails-container"></div>
                            </div>
                            
                            <!-- Image upload fields -->
                            <div class="row">
                           
                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                    <img src="" alt="" id="imgView1">
                                    <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event), viewImage(event, 1)">
                                    <div id="images-error" class="error-message"></div>
                                </div>
                                <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                    <img src="" id="croppedImg1" alt="">
                                    <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                </div>
                                
                         
                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                    <img src="" alt="" id="imgView2">
                                    <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event), viewImage(event, 2)">
                                    <div id="images-error2" class="error-message"></div>
                                </div>
                                <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                    <img src="" id="croppedImg2" alt="">
                                    <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                </div>
                                
                             
                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                    <img src="" alt="" id="imgView3">
                                    <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event), viewImage(event, 3)">
                                    <div id="images-error3" class="error-message"></div>
                                </div>
                                <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                    <img src="" id="croppedImg3" alt="">
                                    <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                </div>
                              
                                <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                    <img src="" alt="" id="imgView4">
                                    <input class="form-control" type="file" name="images" id="input4" accept="image/png, image/jpeg, image/jpg" onchange="viewImage4(event), viewImage(event, 4)">
                                    <div id="images-error4" class="error-message"></div>
                                </div>
                                <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                    <img src="" id="croppedImg4" alt="">
                                    <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                </div>
                            </div>
                            
                        </div>
                    
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
                        </div>
                    </form>
                    
                   </div>
               </div>
           </div>
       </div>
   </section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>

    function validateAndSubmit() {
        console.log("Publish button clicked");
    if (validateForm()) {
       document.forms[0].submit();
    }
    }
     
    function viewImage1(event) {
               document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
           }
    
           function viewImage2(event) {
               document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
           }
    
           function viewImage3(event) {
               document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
           }
    
           function viewImage4(event) {
               document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
           }
    
    function viewImage(event, index) {
    let input = event.target;
    let reader = new FileReader();
    reader.onload = function () {
        let dataURL = reader.result;
        let image = document.getElementById('imgView' + index);
        image.src = dataURL;
        let cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true
        });
        
        let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
        cropperContainer.style.display = 'block';
        let saveButton = document.querySelector('#saveButton' + index);
        saveButton.addEventListener('click', async function () {
            let croppedCanvas = cropper.getCroppedCanvas();
            let croppedImage = document.getElementById("croppedImg" + index);
            croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
            let timestamp = new Date().getTime();
            let fileName = `cropped-img-${timestamp}-${index}.png`;
            await croppedCanvas.toBlob(blob => {
                let input = document.getElementById('input' + index);
                let imgFile = new File([blob], fileName, { type: 'image/png' });
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                input.files = fileList.files;
            });
            cropperContainer.style.display = 'none';
            cropper.destroy();
        });
    };
    reader.readAsDataURL(input.files[0]);
}




           const selectedImages = [];
       document.getElementById("imageInput").addEventListener("change", handleFileSelect);
    
           function handleFileSelect(event) {
               const addedImagesContainer = document.getElementById("addedImagesContainer");
               addedImagesContainer.innerHTML = "";
               const files = event.target.files;
               for (let i = 0; i < files.length; i++) {
                   const file = files[i];
                   selectedImages.push(file);
                   const thumbnail = document.createElement("div");
                   thumbnail.classList.add("thumbnail");
                   const img = document.createElement("img");
                   img.src = URL.createObjectURL(file);
                   img.alt = "thumbnail";
                   img.style.width = "50px";
                   img.style.height = "auto";
                   const removeIcon = document.createElement("span");
                   removeIcon.classList.add("remove-icon");
                   removeIcon.innerHTML = "&times;";
                   removeIcon.addEventListener("click", function () {
                       const index = selectedImages.indexOf(file);
                       if (index !== -1) {
                           selectedImages.splice(index, 1);
                       }
                       thumbnail.remove();
                   });
                   thumbnail.appendChild(img);
                   thumbnail.appendChild(removeIcon);
                   addedImagesContainer.appendChild(thumbnail);
               }
           };
           

          

   
    
    function validateForm() {
    let isValid = true;


    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');

   
    const productName = document.getElementById('productName').value.trim();
    const description = document.getElementById('description').value.trim();
    const regularPrice = document.getElementById('regularPrice').value.trim();
    const salePrice = document.getElementById('salePrice').value.trim();
    const quantity = document.getElementById('quantity').value.trim();
    const color = document.getElementById('color').value.trim();
    const category = document.getElementById('category').value;

   
    if (!productName || /^[0-9]+$/.test(productName)) {
    document.getElementById('productName-error').textContent = 'Product name is required and cannot be only digits.';
    isValid = false;
}


  
if (!description || /^[0-9]+$/.test(description)) {
    document.getElementById('description-error').textContent = 'Description is required and cannot be only numbers.';
    isValid = false;
}


    if (!regularPrice || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
        document.getElementById('regularPrice-error').textContent = 'Valid regular price is required.';
        isValid = false;
    }

  
    if (salePrice && (isNaN(salePrice) || parseFloat(salePrice) < 0)) {
        document.getElementById('salePrice-error').textContent = 'Valid sale price is required.';
        isValid = false;
    }

   
    if (!quantity || isNaN(quantity) || parseInt(quantity) <= 0) {
        document.getElementById('quantity-error').textContent = 'Valid quantity is required.';
        isValid = false;
    }

   
    if (!color||/^[0-9]+$/.test(color)) {
        document.getElementById('color-error').textContent = 'Color is required and cannot be only digits';
        isValid = false;
    }

   
    if (!category) {
        document.getElementById('category-error').textContent = 'Category is required.';
        isValid = false;
    }

   
    const imageInputs = document.querySelectorAll('input[type="file"]');
let totalImages = 0;

// Count the total files across all input fields
imageInputs.forEach(input => {
    totalImages += input.files.length;
});

// Check if the total count is less than 3
if (totalImages < 3) {
    document.getElementById('images-error').textContent = 'At least three images are required.';
    isValid = false;
} else {
    document.getElementById('images-error').textContent = ''; // Clear error message if valid
}

    return isValid;
}


function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = 'block';
}



function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = 'none'; 
    });
}

    


   
    
   
  </script>
    
    
     
<%- include('../partials/adminFooter') %>


